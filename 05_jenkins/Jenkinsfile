pipeline {
    agent any
     options {
        disableConcurrentBuilds()
    }
    // environment {
    //     DOCKERFILE_NAME = "Dockerfile"
    //     DOCKER_DIR = "./01_docker"
    //     DOCKER_IMAGE = "ic-webapp"
    //     DOCKER_TAG = "1.0"
    //     DOCKERHUB_ID = "ulrichsteve"
    //     DOCKERHUB_PASSWORD = credentials('dockerhub_password')
    //     PORT_APP = "8080"
    //     PORT_EXT = "8090"
    //     IP = "172.17.0.1"

    // }
    stages {
    //     stage('Build Image'){
    //         steps{
    //             script {
    //                 sh '''
    //                     docker build --no-cache -f ${DOCKER_DIR}/${DOCKERFILE_NAME} -t ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_DIR}/.
    //                 '''
    //             }
    //         }
    //     }
    //      stage('Run and Test'){
    //         steps{
    //             script {
    //                 sh '''
    //                     docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f  ${DOCKER_IMAGE}
    //                     docker run --name ${DOCKER_IMAGE} -dp $PORT_EXT:$PORT_APP ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
    //                     sleep 5
    //                     curl -I http://$IP:$PORT_EXT | grep -i "200"
    //                 '''
    //             }
    //         }
    //     }
    //     stage('Stop and Delete Container') {
    //         steps{
    //             script {
    //                 sh '''
    //                     docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f  ${DOCKER_IMAGE}
    //                 '''
    //             }
    //         }
    //     }
    //     stage('Login and Push Image'){
    //         steps{
    //             script {
    //                 sh '''
    //                     echo $DOCKERHUB_PASSWORD | docker login -u ${DOCKERHUB_ID} --password-stdin
    //                     docker push ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
    //                 '''
    //             }
    //         }
    //     }
        // stage('Build Docker EC2'){
        //     environment{
        //         AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        //         AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        //     }
        //     agent {
        //         docker {
        //             image 'jenkins/jnlp-agent-terraform'
        //         }
        //     }
        //     steps{
        //         script {
        //             sh '''
        //                 mkdir -p ~/.aws
        //                 echo "[default]" > ~/.aws/credentials
        //                 echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        //                 echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        //                 chmod 400 ~/.aws/credentials
        //                 cd 02_terraform/
        //                 terraform init 
        //                 terraform apply -var="stack=docker" -auto-approve
        //                 cat ../04_ansible/host_vars/docker.yaml
        //                 ls ../02_terraform/keypair/
        //             '''
        //         }
        //     }
        // }
        // stage ('Ansible deploy on docker vm'){
        //     agent {
        //         docker {
        //             image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
        //         }
        //     }
        //     steps {
        //         script {
        //             sh '''
        //                 cd 04_ansible/
        //                 ansible-playbook playbooks/docker/main.yaml
        //             '''
        //         }
        //     }
        // }
        // stage('Destroy Docker EC2'){
        //     environment{
        //         AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        //         AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        //     }
        //     agent {
        //         docker {
        //             image 'jenkins/jnlp-agent-terraform'
        //         }
        //     }
        //     steps{
        //         script {
        //             // timeout(timae:30, unit: "MINUTES"){
        //             //     input message: "Confirmer la suppression de l'instance Docker", ok: 'YES'
        //             // }
        //             sh '''
        //                 mkdir -p ~/.aws
        //                 echo "[default]" > ~/.aws/credentials
        //                 echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        //                 echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        //                 chmod 400 ~/.aws/credentials
        //                 cd 02_terraform/
        //                 terraform destroy -var="stack=docker" -auto-approve
        //             '''
        //         }
        //     }
        // }
        // stage('Build k3s EC2'){
        //     environment{
        //         AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        //         AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        //     }
        //     agent {
        //         docker {
        //             image 'jenkins/jnlp-agent-terraform'
        //         }
        //     }
        //     steps{
        //         script {
        //             dir('/var/jenkins_home/workspace/bootcamp') {
        //                 sh '''
        //                     mkdir -p ~/.aws
        //                     echo "[default]" > ~/.aws/credentials
        //                     echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        //                     echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        //                     chmod 400 ~/.aws/credentials
        //                     cd 02_terraform/
        //                     terraform init 
        //                     terraform apply -var="stack=kubernetes" -auto-approve
        //                     cat ../04_ansible/host_vars/k3s.yaml
        //                 '''
        //                 stash name: 'k3s', includes: '04_ansible/host_vars/k3s.yaml'
        //             }
        //         }
        //     }
        // }
        // stage ('Ansible ping  on kubernetes vm'){
        //     agent {
        //         docker {
        //             image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
        //         }
        //     }
        //     steps {
        //         script {
        //             dir('/var/jenkins_home/workspace/bootcamp') {
        //                 unstash 'k3s'
        //                 sh '''
        //                     cd 04_ansible/
        //                     cat host_vars/k3s.yaml
        //                     ansible all -m ping 
        //                 '''
        //             }
        //         }
        //     }
        // }
        // stage ('Ansible deploy on kubernetes vm'){
        //     agent {
        //         docker {
        //             image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
        //         }
        //     }
        //     steps {
        //         script {
        //             unstash 'k3s'
        //             sh '''
        //                 cd 04_ansible/
        //                 ansible k3s -m ping 
        //                 ansible-playbook playbooks/k3s/main.yml
        //             '''
        //         }
        //     }
        // }
        // stage('Destroy Kubernetes EC2'){
        //     environment{
        //         AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        //         AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        //     }
        //     agent {
        //         docker {
        //             image 'jenkins/jnlp-agent-terraform'
        //         }
        //     }
        //     steps{
        //         script {
        //             timeout(timae:30, unit: "MINUTES"){
        //                 input message: "Confirmer la suppression de l'instance Kubernetes", ok: 'YES'
        //             }
        //             sh '''
        //                 mkdir -p ~/.aws
        //                 echo "[default]" > ~/.aws/credentials
        //                 echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        //                 echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        //                 chmod 400 ~/.aws/credentials
        //                 cd 02_terraform/
        //                 terraform destroy -var="stack=kubernetes" -auto-approve
        //                 cat ../04_ansible/host_vars/docker.yaml
        //             '''
        //         }
        //     }
        // }
        stage('Build k3s EC2'){
            environment{
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            steps{
                script {
                    dir('/var/jenkins_home/workspace/bootcamp') {
                        sh '''
                            mkdir -p ~/.aws
                            echo "[default]" > ~/.aws/credentials
                            echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                            echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                            chmod 400 ~/.aws/credentials
                            cd 02_terraform/
                            terraform init 
                            terraform apply -var="stack=kubernetes" -auto-approve
                            cat ../04_ansible/host_vars/k3s.yaml
                        '''
                        stash name: 'k3s', includes: '04_ansible/host_vars/k3s.yaml'
                    }
                }
            }
        }
        stage('test'){
            steps {
                script {
                    sh '''
                        apt install sshpass -y
                        cd 04_ansible/
                        ansible all -m ping 
                    '''
                }
            }
        }
    }
}